{"version":3,"sources":["components/Coin.js","assets/images/darkmode.svg","assets/images/lightmode.svg","App.js","index.js"],"names":["Coin","name","image","symbol","price","volume","priceChange","marketCap","currencysymbol","className","src","alt","toLocaleString","toFixed","App","useState","coins","setCoins","search","setSearch","currency","setCurrency","darkMode","setDarkMode","url","useEffect","interval","setInterval","axios","get","then","res","data","catch","e","console","log","clearInterval","dictionary","inr","usd","eur","gbp","cad","jpy","aud","chf","filteredCoins","filter","coin","toLowerCase","includes","dark","light","width","height","onClick","type","placeholder","onChange","target","value","DropdownButton","map","DropdownType","idx","onSelect","as","ButtonGroup","id","size","variant","title","Dropdown","Item","eventKey","current_price","market_cap","price_change_percentage_24h","total_volume","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae2c3a02.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Coin = ({\n  name,\n  image,\n  symbol,\n  price,\n  volume,\n  priceChange,\n  marketCap,\n  currencysymbol,\n}) => {\n  // destructuring the props passed\n  return (\n    <div className=\"coin-container\">\n      <div className=\" coin-row\">\n        <div className=\"mt-1 coin\">\n          <img src={image} alt=\"crypto\" />\n          <h1>{name}</h1>\n          <p className=\"coin-symbol\">{symbol}</p>\n        </div>\n        <div className=\"border-bottom border-warning coin-data\">\n          {/* toLocaleString used for formatting the figure */}\n          <p className=\"coin-price\">\n            Price: {currencysymbol}\n            {price.toLocaleString()}\n          </p>\n          <p className=\"coin-volume\">\n            Volume: {currencysymbol}\n            {volume.toLocaleString()}\n          </p>\n          {priceChange < 0 ? (\n            <p className=\"coin-percent red\">{priceChange.toFixed(2)}%</p>\n          ) : (\n            <p className=\"coin-percent green\">{priceChange.toFixed(2)}%</p>\n          )}\n          <p className=\"coin-marketcap\">\n            Market Cap: {currencysymbol}\n            {marketCap.toLocaleString()}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Coin;\n","export default __webpack_public_path__ + \"static/media/darkmode.305a0063.svg\";","export default __webpack_public_path__ + \"static/media/lightmode.9d38c344.svg\";","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Coin from \"./components/Coin\";\nimport \"./Coin.css\";\nimport \"./App.css\";\nimport { Dropdown, DropdownButton, ButtonGroup } from \"react-bootstrap\";\n\nimport dark from \"./assets/images/darkmode.svg\";\nimport light from \"./assets/images/lightmode.svg\";\n\nexport function App() {\n  const [coins, setCoins] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [currency, setCurrency] = useState(\"inr\");\n  const [darkMode, setDarkMode] = useState(true);\n  const url = `https://api.coingecko.com/api/v3/coins/markets?vs_currency=${currency}&order=market_cap_desc&per_page=10&page=1&sparkline=false`;\n  // const ref = useRef();\n\n  // Making an API Call only on mount\n  useEffect(() => {\n    const interval = setInterval(() => {\n      axios\n        .get(url)\n        .then((res) => {\n          setCoins(res.data);\n        }) //storing the crypto data in coins state\n        .catch((e) => console.log(e));\n    }, 500);\n    return () => clearInterval(interval);\n  }, [currency, url]);\n\n  const dictionary = {\n    inr: \"₹\",\n    usd: \"$\",\n    eur: \"€\",\n    gbp: \"£\",\n    cad: \"$\",\n    jpy: \"¥\",\n    aud: \"$\",\n    chf: \"₣\",\n  };\n\n  const handleChange = (e) => {\n    // console.log(e.target.value);\n    setSearch(e.target.value); //value entered in the search box stored in search state\n  };\n\n  const filteredCoins = coins.filter((coin) =>\n    coin.name.toLowerCase().includes(search.toLowerCase())\n  ); //filtering to show only matching coins containing the words entered in searchbox\n\n  return (\n    <div>\n      <div className={darkMode ? \"Nav-lightMode\" : \"Nav-darkMode\"}>\n        <img\n          alt=\"\"\n          src={darkMode ? dark : light}\n          width=\"40\"\n          height=\"40\"\n          className=\"float-right mr-4 mt-3\"\n          onClick={() => {\n            setDarkMode(!darkMode);\n          }}\n        />\n\n        <div className=\"coin-search\">\n          <h1 className=\" coin-text\">Crypto Price Tracker</h1>\n          <form>\n            <input\n              type=\"text\"\n              className=\"coin-input\"\n              placeholder=\"Search\"\n              onChange={handleChange}\n            ></input>\n          </form>\n        </div>\n        <div className=\"text-center toggle-currency\">\n          <div>\n            {/* <label style={{ \"margin-right\": \"5px\" }}>Currency: </label> */}\n            {[DropdownButton].map((DropdownType, idx) => (\n              <DropdownType\n                onSelect={(e) => {\n                  setCurrency(e);\n                }}\n                as={ButtonGroup}\n                key={idx}\n                id={`dropdown-button-drop-${idx}`}\n                size=\"sm\"\n                variant=\"warning\"\n                title=\"Currency\"\n              >\n                <Dropdown.Item eventKey=\"inr\">INR</Dropdown.Item>\n                <Dropdown.Item eventKey=\"usd\">USD</Dropdown.Item>\n                <Dropdown.Item eventKey=\"eur\">EUR</Dropdown.Item>\n                <Dropdown.Item eventKey=\"gbp\">GBP</Dropdown.Item>\n                <Dropdown.Item eventKey=\"cad\">CAD</Dropdown.Item>\n                <Dropdown.Item eventKey=\"jpy\">JPY</Dropdown.Item>\n                <Dropdown.Item eventKey=\"aud\">AUD</Dropdown.Item>\n                <Dropdown.Item eventKey=\"chf\">CHF</Dropdown.Item>\n              </DropdownType>\n            ))}\n          </div>\n          {/* <select\n          onChange={(e) => setCurrency(e.target.value)}\n          id=\"toggle-currency\"\n          >\n          <option value=\"inr\">INR</option>\n          <option value=\"usd\">USD</option>\n          <option value=\"eur\">EUR</option>\n          <option value=\"gbp\">GBP</option>\n          <option value=\"cad\">CAD</option>\n          <option value=\"jpy\">JPY</option>\n          <option value=\"aud\">AUD</option>\n          <option value=\"chf\">CHF</option>\n        </select> */}\n        </div>\n      </div>\n      {/* {console.log(currency)} */}\n      {/* For each filtered coin pass the details to Coin component to display */}\n      <div className={darkMode ? \"Table-lightMode\" : \"Table-darkMode\"}>\n        {filteredCoins.map((coin) => {\n          return (\n            <Coin\n              key={coin.id}\n              name={coin.name}\n              image={coin.image}\n              symbol={coin.symbol}\n              price={coin.current_price}\n              marketCap={coin.market_cap}\n              priceChange={coin.price_change_percentage_24h}\n              volume={coin.total_volume}\n              currencysymbol={dictionary[currency]}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}